import './Export.css';
import React, { componentDidMount } from 'react';
import { Redirect } from 'react-router-dom'
import { generateVerificationHash, copyToClipboard } from '../../lib/utils.js'

class Export extends React.Component {
  constructor(props) {
    super(props)
    this.state = { verification_token: "" }
  }

  componentDidMount() {
    let generationDate = new Date()
    const canvas = document.getElementById('canvas')
    const ctx = canvas.getContext("2d")
    const img = this.refs.background
    img.onload = () => {
      ctx.fillStyle = "#111420"
      ctx.fillRect(0, 0, canvas.width, canvas.height)
      let ptrn = ctx.createPattern(img, 'repeat')
      ctx.fillStyle = ptrn
      ctx.fillRect(0, 0, canvas.width, canvas.height)
      ctx.font = "11px Courier"
      this.props.badges.forEach((badge, i, a) => {
        let image = document.getElementById(badge.issuer)
        let series = badge.code.substr(2,2)
        let yPos = 10 + (128 * Math.floor(i / 8) + 10 * Math.floor(i / 8))
        let xPos = 90 + (128 * i + 10 * i) - yPos * 8

        ctx.fillStyle = "#ffffff"
        if (i === 0) {
          ctx.fillText("SERIES " + series + " BADGES", 10, 17)
        } else if (badge.code === "SSQ01") {
          yPos += 30
          ctx.fillText("EVENT BADGES", 1025, yPos + 7)
          xPos = 976
        } else if (series !== a[i-1].code.substr(2,2)) {
          yPos += 10
          if (series === "03") { yPos += 10 }
          ctx.fillText("SERIES " + series + " BADGES", 10, yPos + 7)
        } else if (a[0].code.substr(2,2) !== series) {
          yPos += 10
          if (series === "03") { yPos += 10 }
        }
        yPos += 10
        ctx.drawImage(image, xPos, yPos, 128, 128)
        if (badge.owned === false) {
          ctx.globalAlpha = 0.95
          ctx.fillStyle = "#000000"
          ctx.fillRect(xPos, yPos, 128,128)
          ctx.fillStyle = "#ffffff"
          ctx.globalAlpha = 1
          ctx.fillText("BADGE NOT OWNED", xPos + 15, yPos + 128 / 2)
          ctx.font = "15px Courier"
          ctx.fillText(badge.code, xPos + 10, yPos + 20)
          if (badge.monochrome === true) { ctx.fillText("MONOCHROME", xPos + 10, yPos + 35) }
          ctx.font = "11px Courier"
        }
        if (i === a.length - 1) {
          if (badge.code !== "SSQ01") { yPos += 138 }
          ctx.font = "12px Courier"
          ctx.fillText("VERIFICATION TEXT: " + this.props.verText, 10, yPos + 9)
          ctx.fillText("GENERATED ON: " + generationDate, 10, yPos + 21)
          ctx.fillText("TO VERIFY PROOF, PLEASE VISIT BADGES.ELLIOTFRIEND.COM/VERIFY", 10, yPos + 34)
          ctx.fillText("THIS IMAGE HAS BEEN SIGNED BY AND CREATED FOR:", 10, yPos + 99)
          ctx.fillText("GENERATED BY BADGES.ELLIOTFRIEND.COM", 10, yPos + 128)
          ctx.font = "20px Courier"
          ctx.fillText(this.props.pubkey, 10, yPos + 115)
        }
      })
    }

    let user_assets = this.props.user_assets
    let pubkey = this.props.pubkey
    let verText = this.props.verText
    let messSig = this.props.messSig

    let generateVerificationOperations = (assets) => {
      return assets.reduce((acc, item, i, a) => {
        return acc.concat(item.operation)
      }, [])
    }

    let verificationObject = {
      p: pubkey,
      m: verText,
      s: messSig,
      d: generationDate,
      o: generateVerificationOperations(user_assets)
    }

    generateVerificationHash(verificationObject)
      .then((hash) => {
        let finalArray = new Array(JSON.stringify(verificationObject), hash)
        let token = Buffer.from(finalArray.join(',')).toString('base64')
        this.setState({
          verification_token: token
        })
      })


  }

  render() {
    let badges = this.props.badges
    let pubkey = this.props.pubkey
    let exportStatus = this.props.exportStatus

    const hideImages = (badges) => {
      let imgArray = []
      badges.forEach((badge, i) => {
        imgArray.push(<img id={badge.issuer} alt={`${badge.code} NFT Badge`} src={"/assets/badges/" + badge.filename} className="d-none" />)
      })
      return imgArray
    }

    let downloadAsFile = () => {
      let blob = new Blob(
        [ this.state.verification_token ],
        { type: "text/plain;charset=utf-8" }
      )
      let downloadURL = URL.createObjectURL(blob)
      return downloadURL
    }
    let downloadURL = downloadAsFile()

    let downloadImage = () => {
      let link = document.createElement('a')
      link.download = `verification-image-${pubkey}.png`
      link.href = document.getElementById('canvas').toDataURL()
      link.click()
      // let canvas = document.getElementById('canvas')
      // let img = canvas.toDataURL("image/png")
      // return img
    }
    // let downloadImageURL = downloadImage()

    let numRows = badges
      .reduce((acc, item, i, arr) => {
        if (i > 0) {
          if ((item.code.substr(0, 4) !== arr[i-1].code.substr(0, 4)) || (item.monochrome && !arr[i-1].monochrome) || (!item.monochrome && arr[i-1].monochrome)) {
            return acc += 1
          } else { return acc }
        } else { return acc }
      }, 1)
    let imgHeight = 10 + 138 * numRows + 40
    if (badges.length > 0) {
      if (badges[badges.length - 1].code !== "SSQ01") {
        imgHeight += 128
      }
    }
    let verificationURL = "https://badges.elliotfriend.com/verify/" + encodeURIComponent(this.state.verification_token)

    return (
      <div>
        <h1 className="mt-5 mb-3">Here's The Receipts!</h1>
        <p>You'll find three things on this page: A shareable image, a verification URL, and a Verification Token.</p><h2 className="mt-5">Shareable Image</h2>
        <p className="mb-3">Share this image with everyone you know! And the ones you don't.</p>
        <p><button onClick={() => downloadImage()} className="btn btn-primary">Download Image</button></p>
        <canvas ref="canvas" id="canvas" width={1114} height={imgHeight} />
        <img ref="background" alt="starry bits" src="/assets/tileable-classic-nebula-space-patterns-6.png" className="d-none" />
        { hideImages(badges) }
        <div className="container mb-3">
          <div className="row">
            <div className="mt-5 col-lg-6">
              <h2>Verification URL</h2>
              <p>A special link has been created for you. You can share this URL with others, and they can automatically verify your badges using it.</p>
              <a className="mb-3 btn btn-primary" href={verificationURL}>This is the Link Right Here</a>
            </div>
            <div className="mt-5 col-lg-6">
              <h2 className="mb-3">Verification Token</h2>
              <p>This token can be pasted into <strong><a href="https://badges.elliotfriend.com/verify">https://badges.elliotfriend.com/verify</a></strong> in order to verify your proof.</p>
              <div className="row mb-3">
                <div className="col">
                  <button onClick={() => copyToClipboard('verificationTokenPre')} type="button" className="w-100 btn btn-primary">Copy to Clipboard</button>
                </div>
                <div className="col">
                  <a href={downloadURL} id="downloadFileButton" download={`verification-token-${pubkey}.txt`} className="w-100 btn btn-primary">Download as File</a>
                </div>
              </div>
              <pre id="verificationTokenPre" className="user-select-all p-3 text-break text-wrap bg-dark">{this.state.verification_token}</pre>
            </div>
          </div>
        </div>
        { exportStatus === false ? <Redirect to={"/prove/" + pubkey} /> : null }
      </div>
    )
  }
}

export default Export
